from app.resource import ResourceBase
from app.resource.errors import NotFoundException
from flask import abort

class PostBase(ResourceBase):
    """ Interaction with a single post resource """

    methods = [ 'GET', 'PUT', 'POST', 'DELETE' ]

    def get(self, postid=None):
        """ This method will return the state of one or more post representations.

            Optional Arguments:
                postid - The identity of a specific post.

            Raises:
                NotFoundException (404) - If the requested postid does not exist.

            Notes:
                Two formats of the data are represented in this method.
                * List of all posts - If postid is not provided
                * Specific post if postid is provided and valid
                GET returns a 200 (OK) on success

            Presented Format:
                {
                    "_links": {
                        "v1.0-post:self": {
                            "href": "/*** URI to this post ***/
                        }, 
                        "v1.0-user:author": {
                            "href": "/*** URI of the author ***/
                            "name": "/*** Name of the author ***/
                        }
                    }, 

                    "body": "/*** The body of the blog post ***/"
                    "title": "/*** The title of the blog post ***/"
                }
                    
        """
        if not postid:
            self.load_all_from_db()
            return self.render_collection('_')

        else:
            self.load_from_db(postid)
            return self.render()

    @ResourceBase.authority_required('authentication')
    def put(self, postid=None):
        """ This method will create or update a specific post

            Required Arguments:
                postid - The identity of the post to be updated.

            Raises:
                NotFoundException (404) - If the requested post does not exist.
                ForbiddenException (403) - If the authenticated user does not own the requested post.
                NotAuthorizedException (401) - If the the request is made but an unauthenticated user.

            Notes:
                PUT can be used to update a specific URI OR to create a specific URI.
                If a given postid does not exist, the system will create the post with the given postid.
                postid MUST be of type, integer.
                PUT returns a 201 (Created) on success.

            Expected Format:
                {
                    "body": "/*** The new body of the blog post (Optional) ***/"
                    "title": "/*** The new title of the blog post (Optional) ***/"
                }
        """

        if not postid: abort(405)

        try:
            self.load_from_db(postid)
            self.update_from_request()
        except NotFoundException:
            self.create_from_request(postid)

        return self.render(), 201, { 'Location' : self.__uri__ }


    @ResourceBase.authority_required('authentication')
    def post(self, postid=None):
        """ This method will create a new post.

            Raises:
                MethodNotAllowedException (405) - If postid is provided. Use PUT method instead.
                NotAuthorizedException (401) - If the the request is made but an unauthenticated user.

            Notes:
                Post can be used to create a post resource. The postid will be generated by the server.
                The Location header is set to the location of the new post and the new post is provided
                in the content body of the response.
                POST returns a 201 (Created) on success.

            Expected Format:
                {
                    "body": "/*** The new body of the blog post (Optional) ***/"
                    "title": "/*** The new title of the blog post (Optional) ***/"
                }

            Presented Format:
                {
                    "_links": {
                        "v1.0-post:self": {
                            "href": "/*** URI to this post ***/
                        }, 
                        "v1.0-user:author": {
                            "href": "/*** URI of the author ***/
                            "name": "/*** Name of the author ***/
                        }
                    }, 

                    "body": "/*** The body of the blog post ***/"
                    "title": "/*** The title of the blog post ***/"
                }
        """

        if postid: abort(405)

        self.create_from_request()
        return self.render(), 201, { 'Location' : self.__uri__ }


    @ResourceBase.authority_required('authentication')
    def delete(self, postid):
        """ This method will remove the specified blog post from the system.

            Required Arguments:
                postid - The identity of the post removed.

            Raises:
                MethodNotAllowedException (405) - If postid is not provided.
                ForbiddenException (403) - If the authenticated user does not own the requested post.
                NotAuthorizedException (401) - If the the request is made but an unauthenticated user.

            Notes:
                DELETE returns a 204 (No Content) on success.

        """

        if not postid: abort(405)
        self.remove_from_db(postid)
        return None, 204

